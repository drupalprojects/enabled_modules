<?php
// $Id$

/**
 * @file
 * Provides a page showing all enabled modules by system name, including modules missing from the file system, and a page showing formerly enabled now disabled modules.  Also provides the operating system directory of the Drupal installation and the paths of enabled modules.
 */

// move to separate module
/**
 * Implementation of hook_block().
 */
function enabled_modules_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks['demo']['info'] = t('Key site modules');
    return $blocks;
  }
  else if ($op == 'configure') {
    switch ($delta) {
      case 'demo':
        $form = array();
        // All we need to provide is a text field, Drupal will take care of
        // the other block configuration options and the save button.
        $form['enabled_modules_demo_list'] = array(
          '#type' => 'checkboxes',
          '#title' => t('Select modules to list in the block'),
          '#options' => enabled_modules_fetch_names($status = 1, $reset = TRUE),
          '#description' => t('Selected modules will be listed in the block.'),
          '#default_value' => variable_get('enabled_modules_demo_list', ''),
        );
        return $form;

        break;
    }
  }
  else if ($op == 'save') {
    switch ($delta) {
      case 'demo':
        variable_set('enabled_modules_demo_list', $edit['enabled_modules_demo_list']);
        break;
    }
  }
  else if ($op == 'view') {
    switch ($delta) {
      case 'demo':
        $block['subject'] = t('Key Site Modules');
        $block['content'] = enabled_modules_block_list($status = 1);
        drupal_add_js('misc/collapse.js');
        break;
    }
    return $block;
  }
}

/**
 * Implementation of hook_help().
 */
function enabled_modules_help($path, $arg) {
  switch ($path) {
    case 'admin/help#enabled_modules':
      return t('Provides a page showing all enabled modules, including modules missing from the file system, and blocks showing recently enabled and recently disabled modules.');
    case 'admin/modules#description':
      return t('Show enabled, missing, and recently toggled modules.');
    case 'admin/reports/enabled_modules':
    case 'admin/reports/enabled_modules/list':
      $help = '<p>'. t('<strong>All enabled modules</strong> are listed here. if a module\'s codebase is not found, the module is marked missing.  The system\'s stored path to each module is available as a tooltip on placing the mouse cursor over the module name.  Your overall Drupal site is presently installed in this directory:') .' <code>'. getcwd() .'</code></p>';
      if (module_exists('update_status')) {
        $help .= '
  <p>'. t('For more information about enabled, installed modules and available modules see the <a href="@status_report">Status report</a> and the <a href="@modules_page">Modules</a> page.', array('@status_report' => url('admin/reports/status'), '@modules_page' => url('admin/build/modules'))) .'</p>';
      }
      return $help;
    case 'admin/reports/enabled_modules/disabled':
      $help = '<p>'. t('<strong>Formerly enabled and now disabled modules</strong> are listed here.  If a codebase is no longer found the modules is marked missing.  Modules which have been properly uninstalled are not listed.  The system\'s stored path to each module is available as a tooltip on placing the mouse cursor over the module name.  Your overall Drupal site is presently installed in this directory:') .' <code>'. getcwd() .'</code></p>';
      if (module_exists('update_status')) {
        $help .= '
<p>'. t('For more information about enabled, installed modules and available modules see the <a href="@status_report">Status report</a> and the <a href="@modules_page">Modules</a> page.', array('@status_report' => url('admin/reports/status'), '@modules_page' => url('admin/build/modules'))) .'</p>';
      }
      return $help;
    }
  }

/**
 * Implementation of hook_perm().
 */
function enabled_modules_perm() {
  return array('view enabled modules');
}

/**
 * Implementation of hook_theme().
 */
function enabled_modules_theme() {
  return array(
    'enabled_modules_block_list' => array(
      'arguments' => array('modules' => NULL),
    ),
  );
}

// Helper functions
function enabled_modules_block_list($status = 1) {
  $module_list = variable_get('enabled_modules_demo_list', 0);
  $modules = enabled_modules_fetch_demo($status);
  $output .= theme('enabled_modules_block_list', $modules, $status);
  return $output;
}

function enabled_modules_fetch_demo($status = 1, $reset = TRUE) {
  static $modules = array();
  if ($reset || !isset($modules) || empty($modules)) {
    $module_list = array_values(variable_get('enabled_modules_demo_list', 0));
    $result = db_query("SELECT filename, name, info, throttle, bootstrap, schema_version FROM {system} WHERE type = 'module' AND status = %d ORDER BY name", $status);
    while ($module = db_fetch_object($result)) {
      if (in_array($module->name, $module_list, TRUE)) {
        $module->info = unserialize($module->info);
        $modules[] = $module;
      }
    }
  }
  return $modules;
}

function enabled_modules_fetch_names($status = 1, $reset = TRUE) {
  $module_names = array();
  if ($reset || !isset($modules) || empty($modules)) {
    $result = db_query("SELECT filename, name, info, throttle, bootstrap, schema_version FROM {system} WHERE type = 'module' AND status = %d ORDER BY name", $status);
    while ($module = db_fetch_object($result)) {
      $module_names[$module->name] = $module->name;
    }
  }
  return $module_names;
}

function theme_enabled_modules_block_list($modules, $status = 1) {
  $output = '';

  foreach ($modules as $module) {
    $output .= '<fieldset class="collapsible collapsed"><legend>' .$module->name .'</legend>';
    $output .= '<div>Version: '. $module->info['version'] .'</div>';
    $output .= '<div>'. $module->info['description'] .'</div>';

    $output .= l(t('Project page'), 'http://drupal.org/project/'. $module->name, $options = array('html'=>true));
    $output .='<ul><li>';
    if (isset($module->info['dependencies'][0])){
      $output .=t('Depends on:') .'<br>';
      $output .= enabled_modules_array_link($module->info['dependencies']);
      $output .='</li></ul>';
    }
    if (isset($module->info['dependents'][0])){
      $output .='<ul><li>';
      $output .=t('Required by:') .'<br>';
      $output .= enabled_modules_array_link($module->info['dependents']);
      $output .='</li></ul>';
    }
    $output .= '</fieldset>';
  }
  return $output;
}

function enabled_modules_array_link($array) {
  foreach($array as $key => $link){
    $output .= l($link, 'http://drupal.org/project/'. $link, $options = array('html => TRUE'));
    $output .= '<br />';
  }
  return $output;
 }

/**
 * @function
 * Implements hook_views_api
 */
function enabled_modules_views_api() {
  return array(
    'api' => 2,
  );
}

/**
 * @function
 * Implements hook_system_info_alter
 */
function enabled_modules_system_info_alter($info, $file) {
  // This if() loop prevents a huge number of error messages from occurring before table has been created.
  if (db_table_exists('enabled_modules_system')) {
    // This hook is called each time a line of the {system} table is rebuilt.
    // Delete that row
    db_query("DELETE FROM {enabled_modules_system} WHERE filename='%s'", $file->filename);
    // Rebuild
    db_query("INSERT INTO {enabled_modules_system}
      (filename, name, description, package, version, core, project, datestamp, dependencies, dependents, php)
      VALUES
      ('%s', '%s', '%s', '%s', '%s', '%s', '%s', %d, '%s', '%s', '%s')",
      $file->filename, $info['name'], $info['description'], $info['package'], $info['version'], $info['core'], $info['project'], $info['datestamp'], serialize($info['dependencies']), serialize($info['dependents']), $info['php']
    ); 
  }
}

